LOADMEM # test 10
zero r1       # 0
ldi r2 1      # 1
jal 7         # 2
ldi r3 2      # 3
eq r6 r2 r3   # 4 (added)
brnz r6 1     # 5 (modified)
j 9           # 6
add r2 r2 r2  # 7
jr r7 0       # 8
jal 25        # 9
CHECKMEM
pc: 25
r0: 0
r1: 0
r2: 4
r3: 2
r4: 0
r5: 0
r6: 0
r7: 10
END

LOADMEM # test 11
zero r1
ldi r1 1
ldi r2 4
subi r2 1
lt r6 r1 r2 # added
brnz r6 -3  # modified
j 25
CHECKMEM
pc: 25
r0: 0
r1: 1
r2: 1
r3: 0
r4: 0
r5: 0
r6: 0
r7: 0
END

LOADMEM # test 12
zero r1        # 0
ldi r1 16      # 1
add r3 r1 r0   # 2 (modified)
jal 5          # 3 jump to 4, skip one instruction
add r2 r1 r0   # 4 should not be executed (modified)
ldi r2 1       # 5
jr r2 7        # 6 jump to 1+7, skip one instruction
add r2 r1 r2   # 7 should not be executed
ldi r4 4       # 8
sub r4 r4 r2   # 9 r4 -= 1
lt r6 r0 r4    # 10 (added)
brnz r6 -3     # 11 (modified) branch to 9 as long as r4!=0
sw r3 r1 5     # 12 store 16 in DATA[16+5]
lw r5 r1 5     # 13 load DATA[16+5] (16) in r5
lw r3 r1 4     # 14 load DATA[16+4] (0) in r3
j 20           # 15
CHECKMEM
r0: 0
r1: 16
r2: 1
r3: 0
r4: 0
r5: 16
r6: 0
r7: 4
pc: 20
END

LOADMEM # test 13
zero r1
ldi r1 16    # use r1 as array pointer (AP)
ldi r2 1     # use r2 as data
ldi r3 6     # use r3 as boundary condition (6)
sw r2 r1 0   # store data in MEM[AP]
addi r1 1   # AP++
addi r2 1   # data++
lt r6 r2 r3   # (added)
brnz r6 -5 # (modified) repeat while data < boundary: MEM[AP]= data, AP++, data++
zero r1      # reset AP
ldi r1 16
lw r6 r1 0   # Load array [1-5] back to regs in reverse order
lw r5 r1 1
lw r4 r1 2
lw r3 r1 3
lw r2 r1 4
CHECKMEM
r0: 0
r1: 16
r2: 5
r3: 4
r4: 3
r5: 2
r6: 1
r7: 0
END
